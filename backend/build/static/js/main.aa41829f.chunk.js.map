{"version":3,"sources":["components/Task.js","components/Dropdown.js","services/tasks.js","services/category.js","App.js","index.js"],"names":["Task","task","toggleFinished","deleteTask","checked","status","className","type","id","onClick","content","Dropdown","category","value","axios","get","then","response","data","newObject","post","put","delete","newElement","request","console","log","App","useState","tasks","setTasks","newTask","setNewTask","newCategory","setNewCategory","currentCategories","setCurrentCategories","useEffect","taskService","initialTasks","categoryService","categories","displayDate","Date","toDateString","tasksDone","forEach","item","map","i","key","find","n","changedTask","returnedTask","window","confirm","filter","onSubmit","event","preventDefault","oneCategory","replace","length","taskObject","Math","random","date","existingCategories","result","undefined","returnedCategory","concat","alert","onChange","target","placeholder","list","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.aa41829f.chunk.js","sourcesContent":["import React from 'react'\n\nconst Task = ({ task, toggleFinished, deleteTask }) => {\n\t/*     const label = task.status\n    ? 'finished' : 'not finished'\n */\n\n\tconst checked = task.status ? true : ''\n\n\treturn (\n\t\t<div className='tasks'>\n\t\t\t{/*<button onClick={toggleFinished}>{label}</button>*/}\n\n\t\t\t<input type='checkbox' checked={checked} id='myCheck' onClick={toggleFinished}></input>\n\t\t\t{task.content}\n\t\t\t<button onClick={deleteTask} id='deleteButton'>\n\t\t\t\tx\n\t\t\t</button>\n\t\t</div>\n\t)\n}\n\nexport default Task","import React from 'react';\n\nconst Dropdown = ({ category }) => {\n    return (\n        <option value={category} />\n    );\n};\n\nexport default Dropdown;","import axios from 'axios'\nconst baseUrl = 'api/tasks'\n\nconst getAll = () => {\n\tconst request = axios.get(baseUrl)\n\treturn request.then((response) => response.data)\n}\n\nconst create = (newObject) => {\n\tconst request = axios.post(baseUrl, newObject)\n\treturn request.then((response) => response.data)\n}\n\nconst update = (id, newObject) => {\n\tconst request = axios.put(`${baseUrl}/${id}`, newObject)\n\treturn request.then((response) => response.data)\n}\n\nconst deleteTask = (id) => {\n\treturn axios.delete(`${baseUrl}/${id}`)\n}\n\nexport default { getAll, create, update, deleteTask }\n","import axios from 'axios'\nconst baseUrl = 'api/categories'\n\nconst getAll = () => {\n\tconst request = axios.get(baseUrl)\n\treturn request.then((response) => response.data)\n}\n\nconst create = (newElement) => {\n    const request = axios.post(baseUrl, newElement)\n    console.log(request.then((response) => response.data))\n\treturn request.then((response) => response.data)\n}\n\nexport default { getAll, create }\n","import React, { useState, useEffect } from 'react'\nimport Task from './components/Task'\n/* import ProgressBar from './components/ProgressBar' */\nimport Dropdown from './components/Dropdown'\nimport taskService from './services/tasks'\nimport categoryService from './services/category'\n\nconst App = () => {\n\tconst [tasks, setTasks] = useState([]) /*[varName, funcName] <- list of tasks*/\n\tconst [newTask, setNewTask] = useState('')\n\tconst [newCategory, setNewCategory] = useState('')\n\tconst [currentCategories, setCurrentCategories] = useState([])\n\n\tuseEffect(() => {\n\t\tconsole.log('effect')\n\t\ttaskService.getAll().then((initialTasks) => {\n\t\t\tsetTasks(initialTasks)\n\t\t})\n\t}, [])\n\n\tuseEffect(() => {\n\t\tconsole.log('categories')\n\t\tcategoryService.getAll().then((categories) => {\n\t\t\tsetCurrentCategories(categories)\n\t\t\tconsole.log(categories)\n\t\t})\n\t}, [])\n\n\tconst addTask = (event) => {\n\n\t\tevent.preventDefault()\n\t\tconst oneCategory = !newCategory.replace(/\\s/g, '').length === true ? 'uncategorized' : newCategory\n\n\t\tconst taskObject = {\n\t\t\tcontent: newTask,\n\t\t\tid: Math.random(10000000),\n\t\t\tstatus: false,\n\t\t\tcategory: oneCategory,\n\t\t\tdate: Date(),\n\t\t}\n\n\t\tconst existingCategories = currentCategories.find((result) => result.category === newCategory)\n\t\tconsole.log(existingCategories)\n\n\t\tif (existingCategories === undefined && oneCategory !== 'uncategorized') {\n\t\t\tcategoryService.create({ category: oneCategory }).then((returnedCategory) => {\n\t\t\t\tconsole.log(returnedCategory)\n\t\t\t\tsetCurrentCategories(currentCategories.concat(returnedCategory))\n\t\t\t})\n\t\t}\n\n\t\tif (!newTask.replace(/\\s/g, '').length) {\n\t\t\talert('Please enter valid text.')\n\t\t\tsetNewTask('')\n\t\t} else {\n\t\t\ttaskService.create(taskObject).then((returnedTask) => {\n\t\t\t\tsetTasks(tasks.concat(returnedTask))\n\t\t\t\tsetNewTask('')\n\t\t\t\tsetNewCategory('')\n\n\t\t\t})\n\t\t}\n\t}\n\n\tconst handleTaskChange = (event) => {\n\t\tconsole.log(event.target.value)\n\t\tsetNewTask(event.target.value)\n\t}\n\n\tconst handleCategoryChange = (event) => {\n\t\tsetNewCategory(event.target.value)\n\t}\n\n\tconst toggleFinished = (id) => {\n\t\tconst task = tasks.find((n) => n.id === id)\n\n\t\tconst changedTask = { ...task, status: !task.status }\n\n\t\ttaskService.update(id, changedTask).then((returnedTask) => {\n\t\t\tsetTasks(tasks.map((task) => (task.id !== id ? task : returnedTask)))\n\t\t})\n\t}\n\n\tconst deleteTask = (id) => {\n\t\tif (window.confirm('Are you sure you want to delete this?')) {\n\t\t\ttaskService.deleteTask(id)\n\t\t\tsetTasks(tasks.filter((task) => task.id !== id))\n\t\t}\n\t}\n\n\tvar date = new Date();\n\tvar displayDate = date.toDateString();\n\n    var tasksDone = 0;\n    tasks.forEach((item) => { /*map = do same thing to each item in list*/\n\n        if (item.status)\n        {\n            tasksDone += 1;\n        }\n\t\tconsole.log(tasksDone);\n    })\n\n\treturn (\n\t\t<div>\n\t\t\t<h2>Task List for {displayDate}</h2>\n\t\t\t<div>\n\t\t\t\t{tasks.map((task, i) => (\n\t\t\t\t\t<Task\n\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\ttask={task}\n\t\t\t\t\t\ttoggleFinished={() => toggleFinished(task.id)}\n\t\t\t\t\t\tdeleteTask={() => deleteTask(task.id)}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t\t<form onSubmit={addTask}>\n\t\t\t\t<input value={newTask} onChange={handleTaskChange} placeholder=' Task' />\n\t\t\t\t<input\n\t\t\t\t\ttype='text'\n\t\t\t\t\tvalue={newCategory}\n\t\t\t\t\tonChange={handleCategoryChange}\n\t\t\t\t\tplaceholder=' Category'\n\t\t\t\t\tlist='cats'\n\t\t\t\t/>\n\t\t\t\t<datalist id='cats'>\n\t\t\t\t\t{currentCategories.map((category, i) => (\n\t\t\t\t\t\t<Dropdown key={i} category={category.category} />\n\t\t\t\t\t))}\n\t\t\t\t</datalist>\n\n\t\t\t\t<input type=\"submit\" value=\"Add\" />\n\t\t\t\t{/* <button type='submit'>save</button> */}\n\t\t\t</form>\n\n\t\t\t<div className=\"right-side\">\n                \n                <p>Overall</p>\n                <div/>\n                \n                {/* <ProgressBar numberOfTasks={tasks.length} tasksDone={tasksDone} /> */}\n            </div>\n\n\t\t</div>\n\t\t\t\n\t)\n\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n/* import './index.css'; */\n\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}